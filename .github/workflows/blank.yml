# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.CalculateVersion.outputs.Version }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Calculate Version
        id: CalculateVersion
        shell: pwsh
        run: |
          function Get-CurrentVersion {
          [CmdletBinding()]
          param ()
          $latestTag = git describe --tags
          
          $version = [string]::Empty
          if ($latestTag) {
              $version = $latestTag.split('-')[0]
          }
            return $version
          }
          function Get-NewVersion {
              [CmdletBinding()]
              param (
                  [string]
                  $Version
              )

              $currentDate = Get-Date -Format yyyyMMdd
              $newVersion = $currentDate
              if ($Version -eq [string]::Empty) {
                  $newVersion = "{0}.{1}" -f $currentDate, 1
              }
              else {
                  $oldVersionDate = $Version.split('.')[0]
                  if ($currentDate -eq $oldVersionDate) {
                      $oldVersionNumber = [int]($Version.split('.')[1])
                      $newVersionNumber = $oldVersionNumber + 1 

                      $newVersion = "{0}.{1}" -f $currentDate, $newVersionNumber
                  }
                  else {
                      $newVersion = "{0}.{1}" -f $currentDate, 1
                  }
              }
              return $newVersion
          }
          
          write-host "Get Current Version:"
          $version = Get-CurrentVersion
          write-host "Current Version is: $version"
          $newVersion = Get-NewVersion $version  
          "Version=$newVersion" >> $env:GITHUB_OUTPUT
          exit 0
        
          
      - name: echo version
        run: echo ${{ steps.CalculateVersion.outputs.Version }}
      
      - name: GitHub Script
        uses: actions/github-script@v6.3.3
        with:
          # The script to run
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{steps.CalculateVersion.outputs.Version}}',
              sha: context.sha
            })
         
         
